name: Publish site
on:
  push:
  workflow_dispatch:
permissions:
  pages: write
  id-token: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build the site
        run: |
          mkdir -p _site
          mkdir -p _site/tags # Directory for tag pages
          
          # Create header
          cat > _site/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>My Link Blog</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { 
                max-width: 800px; 
                margin: 0 auto; 
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; 
                padding: 1em;
                line-height: 1.5;
              }
              .link-item { 
                margin-bottom: 2em; 
                border-bottom: 1px solid #eee; 
                padding-bottom: 1em; 
              }
              .meta, .tags { 
                color: #666; 
                font-size: 0.9em; 
              }
              a {
                color: #0366d6;
                text-decoration: none;
              }
              a:hover {
                text-decoration: underline;
              }
              h1 {
                border-bottom: 1px solid #eee;
                padding-bottom: 0.5em;
              }
              #search-container {
                margin: 1.5em 0;
              }
              #search-input {
                width: 100%;
                padding: 8px;
                font-size: 16px;
                border: 1px solid #ddd;
                border-radius: 4px;
              }
              .search-status {
                margin-top: 10px;
                font-style: italic;
                color: #666;
              }
              .tag-list {
                margin: 1em 0;
                padding: 0;
                list-style: none;
                display: flex;
                flex-wrap: wrap;
                gap: 0.5em;
              }
              .tag-list li {
                display: inline-block;
              }
              .tag-list a {
                display: inline-block;
                padding: 0.3em 0.8em;
                background-color: #f1f8ff;
                border-radius: 3px;
                font-size: 0.9em;
                color: #0366d6;
              }
              .tag-list a:hover {
                background-color: #ddeeff;
                text-decoration: none;
              }
              .back-link {
                margin-bottom: 1em;
                display: inline-block;
              }
            </style>
          </head>
          <body>
            <h1>My Link Blog</h1>
            
            <div id="search-container">
              <input type="text" id="search-input" placeholder="Search links by title, description, or tags...">
              <p id="search-status" class="search-status"></p>
            </div>
            
            <div id="tags-container">
              <h2>Browse by Tags</h2>
              <ul class="tag-list" id="all-tags"></ul>
            </div>
            
            <div id="links-container">
          EOL
          
          # Process links.json manually, avoiding jq complexity
          echo '<script>
            const linksData = 
          ' >> _site/index.html
          
          # Insert the raw JSON content
          cat links.json >> _site/index.html
          
          echo ';
            
            // Generate HTML for each link
            const linksContainer = document.getElementById("links-container");
            const allTagsContainer = document.getElementById("all-tags");
            
            // Extract all unique tags
            const allTags = new Set();
            linksData.forEach(link => {
              link.tags.forEach(tag => allTags.add(tag));
            });
            
            // Create tag list
            const sortedTags = Array.from(allTags).sort();
            sortedTags.forEach(tag => {
              const tagItem = document.createElement("li");
              const tagLink = document.createElement("a");
              tagLink.href = `./tags/${tag.toLowerCase()}.html`;
              tagLink.textContent = tag;
              tagItem.appendChild(tagLink);
              allTagsContainer.appendChild(tagItem);
            });
            
            // Function to create link elements
            function createLinkElement(link) {
              const linkElement = document.createElement("div");
              linkElement.className = "link-item";
              
              const titleElement = document.createElement("h2");
              const titleLink = document.createElement("a");
              titleLink.href = link.url;
              titleLink.textContent = link.title;
              titleElement.appendChild(titleLink);
              
              const descElement = document.createElement("p");
              descElement.className = "description";
              descElement.textContent = link.description;
              
              const dateElement = document.createElement("p");
              dateElement.className = "meta";
              dateElement.textContent = "Posted on " + link.date;
              
              const tagsElement = document.createElement("p");
              tagsElement.className = "tags";
              tagsElement.textContent = "Tags: ";
              
              link.tags.forEach((tag, index) => {
                const tagLink = document.createElement("a");
                tagLink.href = `./tags/${tag.toLowerCase()}.html`;
                tagLink.textContent = tag;
                tagsElement.appendChild(tagLink);
                
                if (index < link.tags.length - 1) {
                  tagsElement.appendChild(document.createTextNode(", "));
                }
              });
              
              linkElement.appendChild(titleElement);
              linkElement.appendChild(descElement);
              linkElement.appendChild(dateElement);
              linkElement.appendChild(tagsElement);
              
              return linkElement;
            }
            
            // Generate links for homepage
            linksData.forEach(link => {
              linksContainer.appendChild(createLinkElement(link));
            });
          </script>' >> _site/index.html
          
          # Add search functionality
          cat >> _site/index.html << EOL
            <footer>
              <p>Last updated: $(date)</p>
            </footer>
            
            <script>
              document.addEventListener('DOMContentLoaded', function() {
                const searchInput = document.getElementById('search-input');
                const searchStatus = document.getElementById('search-status');
                const linkItems = document.querySelectorAll('.link-item');
                
                searchInput.addEventListener('input', function() {
                  const searchTerm = searchInput.value.toLowerCase().trim();
                  let matchCount = 0;
                  
                  if (searchTerm === '') {
                    linkItems.forEach(item => {
                      item.style.display = '';
                    });
                    searchStatus.textContent = '';
                    return;
                  }
                  
                  linkItems.forEach(item => {
                    const itemText = item.textContent.toLowerCase();
                    
                    if (itemText.includes(searchTerm)) {
                      item.style.display = '';
                      matchCount++;
                    } else {
                      item.style.display = 'none';
                    }
                  });
                  
                  if (matchCount === 0) {
                    searchStatus.textContent = 'No matches found';
                  } else if (matchCount === 1) {
                    searchStatus.textContent = '1 match found';
                  } else {
                    searchStatus.textContent = matchCount + ' matches found';
                  }
                });
                
                document.addEventListener('keydown', function(e) {
                  if (e.key === '/' && document.activeElement !== searchInput) {
                    e.preventDefault();
                    searchInput.focus();
                  }
                });
              });
            </script>
          </body>
          </html>
          EOL
          
          # Create a simple Python script to generate tag pages
          cat > create_tag_pages.py << 'EOL'
          import json
          import os
          from datetime import datetime
          
          # Read links.json
          with open('links.json', 'r') as f:
              links = json.load(f)
          
          # Extract all unique tags
          all_tags = set()
          for link in links:
              for tag in link['tags']:
                  all_tags.add(tag)
          
          # Create a page for each tag
          for tag in all_tags:
              tag_links = [link for link in links if tag in link['tags']]
              
              with open(f'_site/tags/{tag.lower()}.html', 'w') as f:
                  f.write(f"""<!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>{tag} - My Link Blog</title>
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body {{ 
                      max-width: 800px; 
                      margin: 0 auto; 
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; 
                      padding: 1em;
                      line-height: 1.5;
                  }}
                  .link-item {{ 
                      margin-bottom: 2em; 
                      border-bottom: 1px solid #eee; 
                      padding-bottom: 1em; 
                  }}
                  .meta, .tags {{ 
                      color: #666; 
                      font-size: 0.9em; 
                  }}
                  a {{
                      color: #0366d6;
                      text-decoration: none;
                  }}
                  a:hover {{
                      text-decoration: underline;
                  }}
                  h1, h2 {{
                      border-bottom: 1px solid #eee;
                      padding-bottom: 0.5em;
                  }}
                  .back-link {{
                      margin-bottom: 1em;
                      display: inline-block;
                  }}
                  .tag-list {{
                      margin: 1em 0;
                      padding: 0;
                      list-style: none;
                      display: flex;
                      flex-wrap: wrap;
                      gap: 0.5em;
                  }}
                  .tag-list li {{
                      display: inline-block;
                  }}
                  .tag-list a {{
                      display: inline-block;
                      padding: 0.3em 0.8em;
                      background-color: #f1f8ff;
                      border-radius: 3px;
                      font-size: 0.9em;
                      color: #0366d6;
                  }}
                  .tag-list a:hover {{
                      background-color: #ddeeff;
                      text-decoration: none;
                  }}
              </style>
          </head>
          <body>
              <a href="../" class="back-link">← Back to all links</a>
              <h1>Links tagged with "{tag}"</h1>
              
              <div id="links-container">
          """)
          
                  # Add links for this tag
                  for link in tag_links:
                      f.write(f"""
                  <div class="link-item">
                      <h2><a href="{link['url']}">{link['title']}</a></h2>
                      <p class="description">{link['description']}</p>
                      <p class="meta">Posted on {link['date']}</p>
                      <p class="tags">Tags: """)
                      
                      # Add tag links
                      tags_html = []
                      for link_tag in link['tags']:
                          tags_html.append(f'<a href="./{link_tag.lower()}.html">{link_tag}</a>')
                      
                      f.write(', '.join(tags_html))
                      
                      f.write("""</p>
                  </div>""")
          
                  # Close the HTML
                  current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                  f.write(f"""
              </div>
              <footer>
                  <p>Last updated: {current_time}</p>
              </footer>
          </body>
          </html>""")
          
          print("Tag pages created successfully!")
          EOL
          
          # Run the Python script to create tag pages
          python3 create_tag_pages.py || python create_tag_pages.py
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
